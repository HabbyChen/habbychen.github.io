<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>habbychen的技术笔记</title>
    <link>https://9136347.com/</link>
    <description>Recent content on habbychen的技术笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 23 Feb 2022 09:39:53 +0800</lastBuildDate><atom:link href="https://9136347.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>过度设计会扼杀你的产品</title>
      <link>https://9136347.com/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BF%87%E5%BA%A6%E8%AE%BE%E8%AE%A1%E4%BC%9A%E6%89%BC%E6%9D%80%E4%BD%A0%E7%9A%84%E4%BA%A7%E5%93%81/</link>
      <pubDate>Wed, 23 Feb 2022 09:39:53 +0800</pubDate>
      
      <guid>https://9136347.com/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BF%87%E5%BA%A6%E8%AE%BE%E8%AE%A1%E4%BC%9A%E6%89%BC%E6%9D%80%E4%BD%A0%E7%9A%84%E4%BA%A7%E5%93%81/</guid>
      <description>原文:https://www.infoq.cn/article/prA7KSYtE7YVuralm19g 本文不只针对产品经理。创始人、投资者，或者任何其他在任何数字产品或服务方面有足够关系的人都可以利用本文的观点。 我相信这一点，因为我们将讨论创建产品时最普遍的问题之一：过度设计产品。依我看，过度设计要比缺乏良好的开发实践扼杀更多的产品。 在讨论详细情况之前，让我来介绍一下我的背景。当上产品经理之前，我是个工程师。实际上，我受过计算机科学的</description>
    </item>
    
    <item>
      <title>API网关的适用场景</title>
      <link>https://9136347.com/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/API%E7%BD%91%E5%85%B3%E7%9A%84%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF/</link>
      <pubDate>Fri, 18 Feb 2022 16:05:27 +0800</pubDate>
      
      <guid>https://9136347.com/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/API%E7%BD%91%E5%85%B3%E7%9A%84%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF/</guid>
      <description>在 https://v2ex.com/t/794757 有个问题： “API 网关到底适用于什么场景？” “类似 KONG APISIX 等，各种文档的说法基本都一致，作为后端服务（微服务）的流量入口，进行转发、鉴权、流控等等，看起来是一个跟业务系统相对独立的组建。 但是又想想，网关如果要做到认证、鉴权、流控等等，必须要跟业务深度绑定啊。拿认证鉴权来说，几乎每个主流网关都提供主流认证方式比如 http 、OAuth2 、JWT 等，可是看完后一脸懵逼，这有啥用？业务系统原本就有自己的用户体系啊，怎么结合起来呢？总不能让用户直接到网</description>
    </item>
    
    <item>
      <title>kratos中internal目录结构的作用说明</title>
      <link>https://9136347.com/golang/kratos%E4%B8%ADinternal%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E7%9A%84%E4%BD%9C%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Fri, 18 Feb 2022 16:00:00 +0800</pubDate>
      
      <guid>https://9136347.com/golang/kratos%E4%B8%ADinternal%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E7%9A%84%E4%BD%9C%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
      <description>一致一来对kratos中internal里面的biz啊，data目录的作用不是特别了解 在网上不知道什么时候找到一张图，我觉得分析的比较透彻。</description>
    </item>
    
    <item>
      <title>Hugo美化url</title>
      <link>https://9136347.com/%E9%9A%8F%E7%AC%94/Hugo%E7%BE%8E%E5%8C%96url/</link>
      <pubDate>Tue, 15 Feb 2022 17:08:52 +0800</pubDate>
      
      <guid>https://9136347.com/%E9%9A%8F%E7%AC%94/Hugo%E7%BE%8E%E5%8C%96url/</guid>
      <description>用hugo直接生成github page的主题的时候链接非常的不美观，全是xxx.github.io/post/xxxx post这个层级实在让人讨厌 我试了用分类等，但是不支持，查询了官方的说明， https://www.gohugo.org/doc/extras/permalinks/ 这个标签可以使用，在默认的config.toml中可以有集中样式设置 比如按照时间的： 1permalinks:2post:/:year/:month/:title/或者按照slug的 1permalinks: 2 post: /:slug/:title/ 需要注意的是，如果说按照时间去处理链接，那么需要在文章的顶</description>
    </item>
    
    <item>
      <title>授权协议</title>
      <link>https://9136347.com/%E9%9A%8F%E7%AC%94/%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Tue, 15 Feb 2022 17:08:52 +0800</pubDate>
      
      <guid>https://9136347.com/%E9%9A%8F%E7%AC%94/%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE/</guid>
      <description>协议介绍 CC 协议主要用于文字或艺术类的创作内容上，而 GNU/BSD 许可证更广泛应用于软件及其源码方面。 * 关于 CC 协议不建议用于软件和代码的文章：知乎 – 为什么 GitHub 不支持 CC 协议(知识共享协议)？ CC 协议（Creative Commons License，知识共享协议） GNU GPL（GNU General Public Licence） GNU LGPL（GNU Lesser General Public Licence） BSD MIT Apache License 协议选择 文档、文章、艺术类 是否允许依据你的创作进行的再创作被分享？ A、是 B、否 C、是，只要在相同的授权条件下 是否允许你的创作应用</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://9136347.com/about/</link>
      <pubDate>Tue, 15 Feb 2022 11:59:23 +0800</pubDate>
      
      <guid>https://9136347.com/about/</guid>
      <description>一个入行十几年的程序员 什么都怎么深入 又什么都想玩一下 写了很多年的php 也会写点golang 喜欢玩游戏 但是玩得稀烂 唉 一不小心就把自己炼废了</description>
    </item>
    
  </channel>
</rss>
